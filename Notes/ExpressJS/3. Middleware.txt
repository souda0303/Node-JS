
Middleware:

Express is a routing and middleware web framework that has minimal functionality of its own: An Express application is essentially a 
series of middleware function calls.

Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware 
function in the applicationâ€™s request-response cycle. The next middleware function is commonly denoted by a variable named next.

Middleware functions can perform the following tasks:
### Execute any code.
### Make changes to the request and the response objects.
### End the request-response cycle.
### Call the next middleware function in the stack.

If the current middleware function does not end the request-response cycle, it must call next() to pass control to the next 
middleware function. Otherwise, the request will be left hanging.


Middleware functions can be used for various purposes, including:

1. **Logging**: Logging information about incoming requests, such as request method, URL, and timestamp.

2. **Authentication**: Checking if a user is authenticated before allowing access to certain routes or resources.

3. **Authorization**: Verifying if a user has the necessary permissions to access a specific route or resource.

4. **Error handling**: Catching errors that occur during the request-response cycle and responding with appropriate error messages.

5. **Request parsing**: Parsing the request body or headers before passing it to route handlers.

6. **Response modification**: Modifying the response object before sending it back to the client, such as adding custom headers or 
formatting the response data.

Middleware functions in Express.js are executed sequentially in the order they are defined. They can be defined globally for all routes 
or locally for specific routes or route patterns.

Here's a basic example of how middleware is used in Express.js:

const express = require('express');
const app = express();

// Global middleware
app.use((req, res, next) => {
    console.log('Time:', Date.now());
    next();
});

// Route-specific middleware
app.get('/user', (req, res, next) => {
    // Middleware specific to the /user route
    next();
}, (req, res) => {
    res.send('User information');
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something broke!');
});

// Starting the server
app.listen(3000, () => {
    console.log('Server is running on port 3000');
});

In this example:

- The global middleware logs the current timestamp for every incoming request.
- The `/user` route has its own middleware that is specific to that route.
- Error handling middleware is used to catch and handle any errors that occur during the request-response cycle.

Middleware functions in Express.js provide a flexible and powerful way to handle common tasks in web applications.